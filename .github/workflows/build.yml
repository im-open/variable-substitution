name: Build and Check for Changes
on:
  # This workflow uses the pull_request trigger which prevents write permissions and secrets
  # access to the target repository from public forks.  This should remain as a pull_request
  # trigger because checkout, build, format and checking for changes do not need elevated
  # permissions to the repository.  The reduced permissions for public forks is adequate.
  # Since this will commit readme/recompile changes back to the branch, special attention
  # should be paid to changes made to this workflow when reviewing the PR and granting
  # permission to first time contributors to run the workflow.
  pull_request:
  # Don't include any specific paths here so we always get a build that produces a status
  # check that our Branch Protection Rules can use.  Having a status check also allows us
  # to require that branches be up to date before they are merged.

jobs:
  build:
    strategy:
      matrix:
        os: [windows-latest, ubuntu-latest, macos-latest]
    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          ref: ${{ github.head_ref }}
          fetch-depth: 0

      - name: Setup Node.js 16
        uses: actions/setup-node@v3
        with:
          node-version: 16.x

      # If this step results in changes, they will be committed in the last step
      - name: Recompile and Build action
        run: |
          npm install
          npm run build

      - name: Run L0 tests
        run: npm run test

      - name: Run test coverage
        if: runner.os == 'Windows'
        run: |
          $coverage_result = npm run coverage
          $start = $false;
          $middle = $false; 
          $end = $false; 
          $count = 0; 

          foreach ($j in $coverage_result) 
          { 
            if ($j.tostring().startswith("--------------")) 
            { 
                  if (!$start) 
                  { 
                      $start = $true;
                      $start_index = $count 
                  } 
                  elseif (!$middle) 
                  {
                      $middle = $true; 
                      $middle_index = $count 
                  } 
                  elseif (!$end) 
                  { 
                      $end = $true; 
                      $end_index = $count 
                  } 
            }
            $count++
          }

          $tbl_md = $coverage_result[($start_index+1)..($end_index-1)] -join "\n"
          $summary = $coverage_result[($end_index + 1)..$count] -join "\n\n"
          $comment = $tbl_md + "\n" + $summary

          $url = "https://api.github.com/repos/${{ github.repository }}/issues/${{ github.event.pull_request.number }}/comments"
          $headers = @{
            "Authorization" = "token ${{ secrets.GITHUB_TOKEN }}"
          }
          Invoke-RestMethod -Method POST -Uri $url -Headers $headers -Body "{ `"body`": `"${comment}`" }"

      - name: Check for code changes to the action
        if: runner.os == 'Linux'
        id: action-code
        uses: im-open/did-custom-action-code-change@v1.0.1
        with:
          files-with-code: "action.yml,package.json,package-lock.json"
          folders-with-code: "src,lib"
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Get the next version for the readme if there are code changes to the action
        if: runner.os == 'Linux' && steps.action-code.outputs.HAS_CHANGES == 'true'
        id: version
        uses: im-open/git-version-lite@v2.3

      - name: Update readme with next version if there are code changes to the action
        if: runner.os == 'Linux' && steps.action-code.outputs.HAS_CHANGES == 'true'
        uses: im-open/update-action-version-in-file@v1.0.0
        with:
          file-to-update: "./README.md"
          action-name: ${{ github.repository }}
          updated-version: ${{ steps.version.outputs.NEXT_VERSION }}

      - name: Commit unstaged readme/recompile changes if there are code changes to the action
        if: runner.os == 'Linux' && steps.action-code.outputs.HAS_CHANGES == 'true'
        run: |
          if [[ "$(git status --porcelain)" != "" ]]; then
            echo "There are changes to commit"
            git config user.name github-actions
            git config user.email github-actions@github.com
            git add .
            git commit -m "Update readme with latest version and/or recompile the action."
            git push origin HEAD:${{ github.head_ref }}
          else
            echo "There were no changes to commit"
          fi
